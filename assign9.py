# -*- coding: utf-8 -*-
"""Assign9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QgsbssMhJYg5KVsqKHiVwqw8AuoumC5A
"""

!pip install albumentations==0.4.6

"""# Cloning Git Repo"""

!git clone "https://github.com/lmaheshds/EVA6-Assignment9-RHRF-.git"

"""Change Directory"""

# Commented out IPython magic to ensure Python compatibility.
# %cd "EVA6-Assignment9-RHRF-/Allfiles/"

"""CIFAR-10 Data Loading"""

from data_loader import ImageDataLoader
from data_transform import CIFAR10Transforms
import albumentations as A

DATA_DIR = 'data'

cifar10 = CIFAR10Transforms()

custom_train_tfms = [A.PadIfNeeded(min_height=40,min_width=40), 
                     A.RandomCrop(32, 32, p=1.0),
                     A.HorizontalFlip(),
                     A.Cutout(num_holes=2, max_h_size=8, max_w_size=8, fill_value=0, always_apply=False, p=0.1),
                     ]
train_transform,  test_transform = cifar10.build_transforms(train_tfms_list=custom_train_tfms, test_tfms_list=[])

image_loader = ImageDataLoader(train_transform, test_transform, DATA_DIR, 512, True, 'CIFAR10', figure_size=(20,10))

"""Train data"""

image_loader.show(dataset_type='train')

"""Test Data"""

image_loader.show(dataset_type='test')

"""Custom ResNet Architecture"""

import torch.nn as nn
import torch.nn.functional as F
from cnn_models import CustomResNet
from learner import Learner

criterion = F.nll_loss
cnn_learner = Learner(train_loader=image_loader.train_loader, test_loader=image_loader.test_loader, model=CustomResNet(),loss_func=criterion)

"""Model Summary"""

cnn_learner.summary(input_size=(3, 32, 32))

"""Learning rates"""

import torch
import torch.optim as optim
from lr_finder import LRFinder

"""LR Minimum"""

optimizer=optim.SGD(cnn_learner.model.parameters(), lr=1e-7, momentum=0.9, weight_decay=cnn_learner.weight_decay)
lr_finder = LRFinder(cnn_learner.model, optimizer, criterion, device="cuda" )
lr_finder.range_test(train_loader=image_loader.train_loader, val_loader=image_loader.test_loader, end_lr=3, num_iter=100)
lr_finder.plot(log_lr=False)
lr_finder.reset()

"""LR Maximum"""

optimizer=optim.SGD(cnn_learner.model.parameters(), lr=1e-2, momentum=0.9, weight_decay=cnn_learner.weight_decay)
lr_finder = LRFinder(cnn_learner.model, optimizer, criterion, device="cuda" )
lr_finder.range_test(image_loader.train_loader, end_lr=10, num_iter=100)
lr_finder.plot(log_lr=False)
lr_finder.reset()

"""Training the model"""

lr_max= 2
lr_min = 1.43E-03
optimizer=optim.SGD(cnn_learner.model.parameters(), lr=0.01, momentum=0.9, weight_decay=cnn_learner.weight_decay)
lr_scheduler = torch.optim.lr_scheduler.CyclicLR(optimizer, base_lr=lr_min, max_lr=lr_max, step_size_up=490, step_size_down=1470)

cnn_learner.fit_custom(20,optimizer,lr_scheduler,pass_loss=False)

"""Plot Losses and Accuracy"""

cnn_learner.plot_losses()

"""Test data Learner"""

from interpreter import Interpreter

intrepret = Interpreter(model=cnn_learner.model, dataloader=image_loader.test_loader, classes=image_loader.classes)

"""Confusion Matrix"""

intrepret.plot_confusion_matrix()

"""Performance Metrics"""

intrepret.show_classification_report()